@page
@model BBSWebApplication.Areas.Identity.Pages.mymainitems.Chatboot1Model
@{
	ViewData["Title"] = "الشات بوت";
}
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Home</title>
	<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
	<link rel="stylesheet" type="text/css" href="dist/jquery.convform.css">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<link rel="stylesheet" type="text/css" href="demo.css">

	<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/
libs/font-awesome/4.7.0/css/font-awesome.css">
	<link rel="stylesheet" type="text/css" href="css/bootstrap.css">
	<link rel="stylesheet" type="text/css" href="css/style.css">
	<link rel="stylesheet" type="text/css" href="css/chatBot.css">

</head>
<body>
		<!-- chatbot Start -->
		<div class="chat_icon">
		<img src="images/OIGchatbot.jpg" alt="chat">
		</div>
		<div class="chatbot-box">
			<div id="chatList">
				<ul>
@* 					<li class="admin-message">XYZ</li>
					<li class="client-message">XYZ</li>
 *@				</ul>
			</div>
			<div class="message-box-wrap">
		    <div class="message-box"></div>

			</div>
		<button id="send"><i class="bi bi-play-fill">&nbsp; </i></button>
		</div>

	<div class="admin-client-message-wrap">
		<select name="service" data-question="Which service you went">
			<option>Please select</option>
			<option>Web Design</option>
			<option>Web Development</option>
			<option>Digital Marketing</option>
		</select>
		<input type="text" name="name" data-question="What is your name">
		<input type="text" name="email" data-question="What is your email" data-name required>
		<input type="text" name="phone" data-question="What is your phone">
		<div data-question="Confirm ?">
			<button id="confirm">Yes</button>
			<button id="notconfirm">No</button>
		</div>
	</div>
	<form id="submit_info_form">
		<div class="submit_info"></div>
		<input type="submit" value="Send" id="submit" name="">
	</form>
	</div>
	<!-- chatbot End -->
	<header class="header">
		<div class="container-fluid">
			<div class="row d-flex align-items-center">
				<div class="col-auto">
					<a href="/Identity/mymainitems/Chatboot1" class="logo"><img src="~/images/OIGchatbot.jpg" alt="logo"></a>
				</div>
			</div>

		</div>
	</header>
	<section id="demo">
		<div class="vertical-align">
			<div class="container">
				<div class="row">
					<div class="col-sm-6 col-sm-offset-3 col-xs-offset-0">
						<div class="card no-border">
							<div id="chat" class="conv-form-wrapper">
								<form action="" method="GET" class="hidden">
									<select data-conv-question="Hello! I'm a bot created from a HTML form. Can I show you some features? (this question comes from a select)" name="first-question">
										<option value="yes">Yes</option>
										<option value="sure">Sure!</option>
									</select>
									<input type="text" name="name" data-conv-question="Alright! First, tell me your full name, please.|Okay! Please, tell me your name first.">
									<input type="text" data-conv-question="Howdy, {name}:0! It's a pleasure to meet you. (note that this question doesn't expect any answer)" data-no-answer="true">
									<input type="text" data-conv-question="This plugin supports multi-select too. Let's see an example." data-no-answer="true">
									<select name="multi[]" data-conv-question="What kind of music do you like?" multiple>
										<option value="Rock">Rock</option>
										<option value="Pop">Pop</option>
										<option value="Country">Country</option>
										<option value="Classic">Classic</option>
									</select>
									<select name="programmer" data-callback="storeState" data-conv-question="So, are you a programmer? (this question will fork the conversation based on your answer)">
										<option value="yes">Yes</option>
										<option value="no">No</option>
									</select>
									<div data-conv-fork="programmer">
										<div data-conv-case="yes">
											<input type="text" data-conv-question="A fellow programmer! Cool." data-no-answer="true">
										</div>
										<div data-conv-case="no">
											<select name="thought" data-conv-question="Have you ever thought about learning? Programming is fun!">
												<option value="yes">Yes</option>
												<option value="no">No..</option>
											</select>
										</div>
									</div>
									<input type="text" data-conv-question="convForm also supports regex patterns. Look:" data-no-answer="true">
									@*<input data-conv-question="Type in your e-mail" data-pattern="^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" id="email" type="email" name="email" required placeholder="What's your e-mail?"> *@
									<input data-conv-question="Now tell me a secret (like a password)" type="password" data-minlength="6" id="senha" name="password" required placeholder="password">
									<select data-conv-question="Selects also support callback functions. For example, try one of these:">
										<option value="google" data-callback="google">Google</option>
										<option value="bing" data-callback="bing">Bing</option>
									</select>
									<select name="callbackTest" data-conv-question="You can do some cool things with callback functions. Want to rollback to the 'programmer' question before?">
										<option value="yes" data-callback="rollback">Yes</option>
										<option value="no" data-callback="restore">No</option>
									</select>
									<select data-conv-question="This is it! If you like me, consider donating! If you need support, contact me. When the form gets to the end, the plugin submits it normally, like you had filled it." id="">
										<option value="">Awesome!</option>
									</select>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
	<section id="demo">
		<div class="vertical-align">
			<div class="container">
				<div class="row">
					<div class="col-sm-6 col-sm-offset-3 col-xs-offset-0">
						<div class="card no-border">
							<div id="chat" class="conv-form-wrapper">
								<form action="" method="GET" class="hidden">
									<select data-conv-question="Hello! I'm a bot created from a HTML form. Can I show you some features? (this question comes from a select)" name="first-question">
										<option value="yes">Yes</option>
										<option value="sure">Sure!</option>
									</select>
									<input type="text" name="name" data-conv-question="Alright! First, tell me your full name, please.|Okay! Please, tell me your name first.">
									<input type="text" data-conv-question="Howdy, {name}:0! It's a pleasure to meet you. (note that this question doesn't expect any answer)" data-no-answer="true">
									<input type="text" data-conv-question="This plugin supports multi-select too. Let's see an example." data-no-answer="true">
									<select name="multi[]" data-conv-question="What kind of music do you like?" multiple>
										<option value="Rock">Rock</option>
										<option value="Pop">Pop</option>
										<option value="Country">Country</option>
										<option value="Classic">Classic</option>
									</select>
									<select name="programmer" data-callback="storeState" data-conv-question="So, are you a programmer? (this question will fork the conversation based on your answer)">
										<option value="yes">Yes</option>
										<option value="no">No</option>
									</select>
									<div data-conv-fork="programmer">
										<div data-conv-case="yes">
											<input type="text" data-conv-question="A fellow programmer! Cool." data-no-answer="true">
										</div>
										<div data-conv-case="no">
											<select name="thought" data-conv-question="Have you ever thought about learning? Programming is fun!">
												<option value="yes">Yes</option>
												<option value="no">No..</option>
											</select>
										</div>
									</div>
									<input type="text" data-conv-question="convForm also supports regex patterns. Look:" data-no-answer="true">
									@* <input data-conv-question="Type in your e-mail" data-pattern="^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" id="email" type="email" name="email" required placeholder="What's your e-mail?"> *@
									<input data-conv-question="Now tell me a secret (like a password)" type="password" data-minlength="6" id="senha" name="password" required placeholder="password">
									<select data-conv-question="Selects also support callback functions. For example, try one of these:">
										<option value="google" data-callback="google">Google</option>
										<option value="bing" data-callback="bing">Bing</option>
									</select>
									<select name="callbackTest" data-conv-question="You can do some cool things with callback functions. Want to rollback to the 'programmer' question before?">
										<option value="yes" data-callback="rollback">Yes</option>
										<option value="no" data-callback="restore">No</option>
									</select>
									<select data-conv-question="This is it! If you like me, consider donating! If you need support, contact me. When the form gets to the end, the plugin submits it normally, like you had filled it." id="">
										<option value="">Awesome!</option>
									</select>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
	<script type="text/javascript" src="jquery-1.12.3.min.js"></script>
	<script type="text/javascript" src="dist/autosize.min.js"></script>
	<script type="text/javascript" src="dist/jquery.convform.js"></script>

	<script>
		function google(stateWrapper, ready) {
			window.open("https://google.com");
			ready();
		}
		function bing(stateWrapper, ready) {
			window.open("https://bing.com");
			ready();
		}
		var rollbackTo = false;
		var originalState = false;
		function storeState(stateWrapper, ready) {
			rollbackTo = stateWrapper.current;
			console.log("storeState called: ", rollbackTo);
			ready();
		}
		function rollback(stateWrapper, ready) {
			console.log("rollback called: ", rollbackTo, originalState);
			console.log("answers at the time of user input: ", stateWrapper.answers);
			if (rollbackTo != false) {
				if (originalState == false) {
					originalState = stateWrapper.current.next;
					console.log('stored original state');
				}
				stateWrapper.current.next = rollbackTo;
				console.log('changed current.next to rollbackTo');
			}
			ready();
		}
		function restore(stateWrapper, ready) {
			if (originalState != false) {
				stateWrapper.current.next = originalState;
				console.log('changed current.next to originalState');
			}
			ready();
		}
	</script>
	<script>
		jQuery(function ($) {
			convForm = $('#chat').convform({ selectInputStyle: 'disable' });
			console.log(convForm);
		});
	</script>

	<script type="text/javascript" src="jquery-1.12.3.min.js"></script>
	<script type="text/javascript" src="dist/autosize.min.js"></script>
	<script type="text/javascript" src="dist/jquery.convform.js"></script>

	<script>
		function google(stateWrapper, ready) {
			window.open("https://google.com");
			ready();
		}
		function bing(stateWrapper, ready) {
			window.open("https://bing.com");
			ready();
		}
		var rollbackTo = false;
		var originalState = false;
		function storeState(stateWrapper, ready) {
			rollbackTo = stateWrapper.current;
			console.log("storeState called: ", rollbackTo);
			ready();
		}
		function rollback(stateWrapper, ready) {
			console.log("rollback called: ", rollbackTo, originalState);
			console.log("answers at the time of user input: ", stateWrapper.answers);
			if (rollbackTo != false) {
				if (originalState == false) {
					originalState = stateWrapper.current.next;
					console.log('stored original state');
				}
				stateWrapper.current.next = rollbackTo;
				console.log('changed current.next to rollbackTo');
			}
			ready();
		}
		function restore(stateWrapper, ready) {
			if (originalState != false) {
				stateWrapper.current.next = originalState;
				console.log('changed current.next to originalState');
			}
			ready();
		}
	</script>
	<script>
		jQuery(function ($) {
			convForm = $('#chat').convform({ selectInputStyle: 'disable' });
			console.log(convForm);
		});
	</script>
</body>
<style>
	.chat_icon {
		position: fixed;
		right: 30px;
		bottom: 10px;
		width: 60px;
		z-index: 1000;
		cursor: pointer;
	}

	.chatbot-box {
		position: fixed;
		right: 30px;
		bottom: 80px;
		background: linear-gradient(to bottom, #bcbcbc 6%, #e7e7e7 20%);
		width: 400px;
		height: 70vh;
	    border-radius: 15px;
	    padding:30px;
	    font-size: 16px;
		box-shadow: 0 11px rgba(0,0,0,0.9);
	    z-index: 100000;
	    transition: all 0.3s ease-out;
		transform:scaleY(0);
		transform-origin:bottom;
	}

	.chatbot-box.active{
			transform:scaleY(1);
		}
	#chatlist {
		height: calc(70vh- 120px);
		overflow-x: auto;
		position: relative;
		-ms-overflow-style: none;
		scroll-width: 0;
	}
	
	#chatList::-webkit-scrollbar{
	display: none;
	}

	#chatList ul {
		I margin: 0;
		padding: 0;
		list-style: none;
		position: absolute;
		width: 100%;
    	bottom: 0;
	    Left: 0;
	    max-height: 100%;
	}
	#chatList ul li.admin-message {
		background-color: white;
		color: #515151;
		padding: 10px 20px;
  	    border-radius: 0 20px 20px 20px;
	    margin:15px 30% 15px 5px;
	    text-transform: capitalize;
	    box-shadow: 0 0 4px rgba(0,0,0,0.3);
	}
		#chatList ul li.client-message {
		background-color: turquoise;
		color: #fff;
		padding: 10px 20px;
		border-radius: 20px 0 20px 20px;
		margin: 15px 5px 15px 30%;
		text-transform: capitalize;
		box-shadow: 0 0 4px rgba(0,0,0,0.3);
		}
.message-box-wrap{
	position:relative;
	margin-top:20px;
}
.message-box input[type="text"],
.message-box select{
	height:40px;
	padding:10px;
	line-height:20px;
	width:calc(100%-50px);
	border-radius:10px;
	border:1px solid #bcb3b3;
}
.message-box button{
	width:100px;
	height:40px;
	padding:10px;
	line-height:20px;
	border-radius:10px;
	border:1px solid #bcb3b3;
}
#send{
	height:40px;
	width:40px;
	position:absolute;
	right:0;
	top:0;
	color:#fff;
	border-radius:50%;
	background-color:turquoise;
	border:0 !important;
	outline:0 !important;
	pointer-events:none;
}

	.admin-client-message-wrap,
	#submit_info_form {
		opacity: 0;
		width: 0;
		height: 0;
		overflow: hidden;
		margin: 0;
		padding: 0;
	}

	
</style>
